@model ControlGastosApp.Web.ViewModels.Gastos.RegistroGastoCreateViewModel
@{
    ViewData["Title"] = "Crear Gasto";
    Layout = "_Layout";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Nuevo Gasto</h1>
</div>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Crear Gasto</h6>
    </div>
    <div class="card-body">
        <form asp-action="Create" id="gastoForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="Fecha" class="control-label"></label>
                        <input asp-for="Fecha" class="form-control" type="date" />
                        <span asp-validation-for="Fecha" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="FondoMonetarioId" class="control-label">Fondo Monetario</label>
                        <select asp-for="FondoMonetarioId" class="form-control" asp-items="ViewBag.Fondos">
                            <option value="">Seleccione un fondo</option>
                        </select>
                        <span asp-validation-for="FondoMonetarioId" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="TipoDocumento" class="control-label">Tipo de Documento</label>
                        <select asp-for="TipoDocumento" class="form-control" asp-items="ViewBag.TiposDocumento">
                            <option value="">Seleccione un tipo de documento</option>
                        </select>
                        <span asp-validation-for="TipoDocumento" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <div class="form-group">
                        <label asp-for="Comercio" class="control-label"></label>
                        <input asp-for="Comercio" class="form-control" />
                        <span asp-validation-for="Comercio" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label asp-for="Observaciones" class="control-label"></label>
                        <input asp-for="Observaciones" class="form-control" />
                        <span asp-validation-for="Observaciones" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <h6 class="m-0 font-weight-bold text-primary mt-4">Detalles del Gasto</h6>
            <div class="table-responsive mt-3">
                <table class="table table-bordered" id="detalles-table">
                    <thead>
                        <tr>
                            <th>Tipo de Gasto</th>
                            <th>Monto</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Detalles.Count; i++)
                        {
                            <tr>
                                <td>
                                    <select asp-for="Detalles[i].TipoGastoId" class="form-control" asp-items="ViewBag.TiposGasto">
                                        <option value="">Seleccione un tipo de gasto</option>
                                    </select>
                                    <span asp-validation-for="Detalles[i].TipoGastoId" class="text-danger"></span>
                                </td>
                                <td>
                                    <input asp-for="Detalles[i].Monto" class="form-control" type="number"
                                           step="0.01"
                                           min="0.01"
                                           oninput="if(this.value.length > 15) this.value = this.value.slice(0,15);" required />
                                    <span asp-validation-for="Detalles[i].Monto" class="text-danger"></span>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" onclick="eliminarDetalle(this)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-group mt-3">
                <button type="button" id="agregar-detalle" class="btn btn-success">
                    <i class="fas fa-plus"></i> Agregar Detalle
                </button>
            </div>

            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Guardar
                </button>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            $("#agregar-detalle").click(function () {
                agregarDetalle();
            });

            // Marcar tipos de gasto excedidos
            const tiposExcedidos = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.TiposGastoExcedidos ?? new List<int>()));
            if (tiposExcedidos.length > 0) {
                const selects = document.querySelectorAll('select[name^="Detalles"]');
                selects.forEach(select => {
                    if (tiposExcedidos.includes(parseInt(select.value))) {
                        select.classList.add("is-invalid");
                        const errorSpan = select.closest("td").querySelector("span.text-danger");
                        if (errorSpan) {
                            errorSpan.textContent = "Se excedió el presupuesto para este tipo de gasto.";
                        }
                    }
                });
            }

            // Validar duplicados al enviar el formulario
            document.getElementById("gastoForm").addEventListener("submit", function (e) {
                const tipoGastoSelects = document.querySelectorAll('select[name^="Detalles"]');
                const tipoGastosSeleccionados = [];
                let duplicado = false;

                tipoGastoSelects.forEach(select => {
                    const value = select.value;
                    if (value) {
                        if (tipoGastosSeleccionados.includes(value)) {
                            duplicado = true;
                            select.classList.add("is-invalid");
                            const errorSpan = select.closest("td").querySelector("span.text-danger");
                            if (errorSpan) errorSpan.textContent = "No se puede repetir el mismo tipo de gasto.";
                        } else {
                            tipoGastosSeleccionados.push(value);
                            select.classList.remove("is-invalid");
                            const errorSpan = select.closest("td").querySelector("span.text-danger");
                            if (errorSpan) errorSpan.textContent = "";
                        }
                    }
                });

                if (duplicado) {
                    e.preventDefault(); // Bloquea envío si hay duplicados
                }
            });
        });

        function agregarDetalle() {
            var index = document.querySelectorAll('#detalles-table tbody tr').length;
            var template = `
                <tr>
                    <td>
                        <select name="Detalles[${index}].TipoGastoId" class="form-control" data-val="true" data-val-required="El tipo de gasto es requerido">
                            <option value="">Seleccione un tipo de gasto</option>
        @foreach (var item in ViewBag.TiposGasto)
        {
                                    <option value="@item.Value">@item.Text</option>
        }
                        </select>
                        <span class="text-danger field-validation-valid" data-valmsg-for="Detalles[${index}].TipoGastoId" data-valmsg-replace="true"></span>
                    </td>
                    <td>
                        <input name="Detalles[${index}].Monto" class="form-control" type="text"
                               pattern="^\\d{1,15}(\\.\\d{0,2})?$"
                               oninput="validateMonto(this)"
                               maxlength="18"
                               data-val="true"
                               data-val-required="El monto es requerido"
                               data-val-regex="El monto debe ser un número válido con máximo 15 dígitos"
                               data-val-regex-pattern="^\\d{1,15}(\\.\\d{0,2})?$" />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Detalles[${index}].Monto" data-valmsg-replace="true"></span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger btn-sm" onclick="eliminarDetalle(this)">Eliminar</button>
                    </td>
                </tr>
            `;
            document.querySelector('#detalles-table tbody').insertAdjacentHTML('beforeend', template);
        }

        function eliminarDetalle(button) {
            button.closest('tr').remove();
        }

        function validateMonto(input) {
            let value = input.value;

            // Permitir solo números y un punto decimal
            value = value.replace(/[^0-9.]/g, '');
            const decimalIndex = value.indexOf('.');
            if (decimalIndex !== -1) {
                const parts = value.split('.');
                value = parts[0] + (parts[1] ? '.' + parts[1] : '');
                if (parts[1] && parts[1].length > 2) {
                    value = parts[0] + '.' + parts[1].substring(0, 2);
                }
            }

            const entero = value.split('.')[0];
            if (entero.length > 15) {
                value = entero.substring(0, 15) + (decimalIndex !== -1 ? value.substring(decimalIndex) : '');
            }

            input.value = value;
        }
    </script>
}
